# This is a workflow to get the QA infrastructure provisonned with terraform through CI/CD

name: QA Infrastructure Provisionning

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

defaults:
    run:
        shell: bash
        working-directory: "./qa-gha/us-east-2"
permissions:
    pull-requests: write

env:
    AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
    AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
    tfplan:
        # Allow the teraform plan on pull request
        if: github.event_name == 'pull_request'
        # The type of runner that the job will run on
        runs-on: ubuntu-latest

        # Steps representing the sequence of tasks that will be executed as part of the tfplan job
        steps:
        # Checkout the repository to the GitHub Actions runner
            - name: checkout
              uses: actions/checkout@v4

        # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file
            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3

            - name: Terraform fmt
              id: fmt
              run: terraform fmt -check
              continue-on-error: true

            - name: Terraform Init
              id: init
              run: terraform init

            - name: Terraform Validate
              id: validate
              run: terraform validate -no-color

            - name: Terraform Plan
              id: plan
              run: terraform plan -no-color
              continue-on-error: true
            
            - uses: actions/github-script@v7
              if: github.event_name == 'pull_request'
              env:
                PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                  // 1. Retrieve existing bot comments for the PR
                  const { data: comments } = await github.rest.issues.listComments({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                  })
                  const botComment = comments.find(comment => {
                    return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
                  })
            
                  // 2. Prepare format of the comment
                  const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
                  #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                  #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
                  <details><summary>Validation Output</summary>
            
                  \`\`\`\n
                  ${{ steps.validate.outputs.stdout }}
                  \`\`\`
            
                  </details>
            
                  #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
                  <details><summary>Show Plan</summary>
            
                  \`\`\`\n
                  ${process.env.PLAN}
                  \`\`\`
            
                  </details>
            
                  *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
                  // 3. If we have a comment, update it, otherwise create a new one
                  if (botComment) {
                    github.rest.issues.updateComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      comment_id: botComment.id,
                      body: output
                    })
                  } else {
                    github.rest.issues.createComment({
                      issue_number: context.issue.number,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      body: output
                    })
                  }

    # Snyk scan and result output as a comment in the pull request
    terraform-snyk-scan:
        # Allow the snyk scan of the terraform files on pull request
        if: github.event_name == 'pull_request'
        needs: tfplan
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v2
        - name: Run Snyk to check configuration files for security issues
            # Snyk can be used to break the build when it detects security issues.
            # In this case we want to upload the issues to GitHub Code Scanning
          continue-on-error: true
          uses: snyk/actions/iac@master
          # The severity-threshold option is set to critical, which ensures that the job fails if any critical vulnerabilities are found during the Snyk scan.
          with:
            file: "./qa-gha/us-east-2"
            args: --severity-threshold=critical
          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

        - name: Upload result to GitHub Code Scanning
          uses: github/codeql-action/upload-sarif@v2
          with:
            sarif_file: snyk.sarif

    tfapply:
        # Allow the terraform apply only if the code is merged to the main branch
        if: github.event_name == 'push'
        needs: terraform-snyk-scan
        # The type of runner that the job will run on
        runs-on: ubuntu-latest

        # Steps representing the sequence of tasks that will be executed as part of the tfapply job
        steps:
            # Checkout the repository to the GitHub Actions runner
            - name: checkout
              uses: actions/checkout@v4

            - name: Deploy Terraform
              run: echo "Terraform Apply"

            
